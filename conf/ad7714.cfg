# ad7714.cfg

# this file is used to set constants for MARTAS's ad7714protocol
# when using AD7714 24bit analog digital converter by Analog Devices
#
# AD7714 has 6 input pins that can be used
#   as 3 Fully Differential inputs (channels 4-6) ("X,Y,Z")
#     full12, full34 and full56
#   or 5 Pseudo Differential inputs (channels 0-3) ("1,2,3,4")
#     pseudo16, pseudo26, pseudo36, pseudo46
#     pseudo56 is the same as full56 therefore omitted
#   3 register banks (X,Y and Z)  define offsets and scale factors
#     X: full12, pseudo16
#     Y: full34, pseudo26
#     Z: full56, pseudo36, pseudo46


# don't forget to insert following line (example) into sensors.cfg
# AD7714_0001_0001,-,-,-,-,-,autonomous,None,-,10,ad7714,AD7714,-,0001,-,-,NTP,environment,24bit analog digital converter
#
# don't forget to insert following line (example) into martas.cfg
# ad7714confpath  :  /etc/martas/ad7714.cfg

# names of channels
#   supported are the three "Fully Differential" channels (Channel 4-6)
#   and 4 "Pseudo Differential" channels (Channel 0-3)
#     leave free not to record this channel
#     in other words: Here you define which channels to record!
NAME_X  :  X
NAME_Y  :  Y
NAME_Z  :  Z
NAME_1  :    
NAME_2  :    
NAME_3  : 
NAME_4  : 

# name of keys
#   needed for magpy signals, one of KEYLIST
KEY_X  :  x
KEY_Y  :  y
KEY_Z  :  z
KEY_1  :  
KEY_2  :  
KEY_3  :  
KEY_4  :  

# physical units
UNIT_X  :  mV
UNIT_Y  :  mV
UNIT_Z  :  mV
UNIT_1  :  
UNIT_2  :  
UNIT_3  :  
UNIT_4  :  

# scale factors for given instruments (e.g. pT/V)
#   values measured by AD7714 are converted to V
#   so e.g. SCALE_X = 1000 (mV/V) would yield values in mV
SCALE_X  :  1000
SCALE_Y  :  1000
SCALE_Z  :  1000
SCALE_1  : 
SCALE_2  : 
SCALE_3  : 
SCALE_4  : 

# offset for given instruments (if needed)
#   measurement = SCALE_X * value + DIFF_X
DIFF_X  :  0
DIFF_Y  :  0
DIFF_Z  :  0
DIFF_1  :  0
DIFF_2  :  0
DIFF_3  :  0
DIFF_4  :  0

# GAIN between 0 and 7
#  this selection has no influence on scale factors
#  please, adopt scale factors when changing gains!
#  nr    amplification
#   0 .. 1
#   1 .. 2
#   2 .. 4
#   ......
#   6 .. 64
#   7 .. 128
GAIN_X  :  0
GAIN_Y  :  0
GAIN_Z  :  0
GAIN_1  : 
GAIN_2  : 
GAIN_3  : 
GAIN_4  : 

# wordlength 16bit:0 24bit:1
WL  :  1

# sampling rate
#   when using more than one channel, the sampling rate is divided
#   e.g. 100Hz means 100 samples per second
#        if 3 channels are recorded, there are only about
#        33 samples per channel in a second
# from 4.8Hz to 1010.5Hz
# calculate hex number (CLK=2457600): 
# FILTER = CLK/128./samplingrate
# or use ad7714protocol.calcSamp2Filt(samplingrate)
#   0xFA0 .. 4.8Hz
#   0x0C0 .. 100Hz
#   0x013 .. 1010.5263157894736Hz
FILTER  :  0C0

# calibration constants from file or calibrate
#   0 .. get calibration constants from file
#   1 .. calibrate as defined below
CALMODE  :  1
# calibration for single channels
#  overwrites values from file!
#   0 .. no calibration, no overwriting
#   1 .. self calibration for offset and scale factor
#   2 .. zero calibration using input voltage
#   3 .. full scale calibration (input voltage has to be provided!)
#   4 .. zero cal. using input voltage + self full calibration
#   5 .. background calibration - see data sheet
#   6 .. offset self calibration
#   7 .. scale factor self calibration
CAL_X  :  1
CAL_Y  :  1
CAL_Z  :  1
CAL_1  :  0
CAL_2  :  0
CAL_3  :  0
CAL_4  :  0

# calibration constants
#   use ad7714protocol.setMode(CHANNEL,1) to perform a self-calibration
#   X .. CHANNEL = 4, Y .. 5, Z .. 6
#   pseudo16 .. CHANNEL = 0, ...
#   to perform zero- and full-calibration seperately:
#   use ad7714protocol.setMode(CHANNEL,6) to perform a self-calibration
#   use ad7714protocol.setMode(CHANNEL,7) to perform a full-calibration
#
#   use ad7714protocol.info() to get constants to insert below
#
# zero-scale calibration registers
OFFSETX  :  1aff37
OFFSETY  :  1aff17
OFFSETZ  :  1aff1b

# full-scale calibration registers
FULLSCALEX  :  654e3d
FULLSCALEY  :  654e29
FULLSCALEZ  :  654d9a
